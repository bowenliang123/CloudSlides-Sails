// Generated by CoffeeScript 1.7.1
(function() {
  module.exports = {
    create: function(req, res) {
      var holderId, pptId, topic;
      pptId = req.param('pptId');
      holderId = req.param('holderId');
      topic = req.param('topic');
      return Meeting.create({
        holder: holderId,
        ppt: pptId,
        topic: topic
      }).exec(function(err, newMeeting) {
        if (err) {
          return res.ok(err);
        }
        return res.json({
          status: 0
        });
      });
    },
    "delete": function(req, res) {
      var meetingId;
      meetingId = req.param('meetingId');
      return Meeting.destroy({
        id: meetingId
      }).exec(function(err) {
        if (err) {
          sails.log(err);
          return res.serverError(err);
        }
        return res.json({
          status: 0
        });
      });
    },
    queryAttend: function(req, res) {
      var userId;
      userId = req.param('userId');
      return User.findOne({
        id: userId
      }).populate('attendMeetings').exec(function(err, user) {
        var meeting, meetingIds, _fn, _i, _len, _ref;
        if (err) {
          return res.serverError(err);
        }
        meetingIds = [];
        _ref = user.attendMeetings;
        _fn = function(meeting) {
          return meetingIds.push(meeting.id);
        };
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          meeting = _ref[_i];
          _fn(meeting);
        }
        return Meeting.find({
          id: meetingIds
        }).populate('holder').exec(function(err, meetingsFull) {
          if (err) {
            return res.serverError(err);
          }
          return res.json(meetingsFull);
        });
      });
    },
    attend: function(req, res) {
      var meetingId, userId;
      userId = req.param('userId');
      meetingId = req.param('meetingId');
      return User.findOne({
        id: userId
      }).exec(function(err, user) {
        if (err) {
          return res.serverError(err);
        }
        sails.log('attend meeting');
        sails.log(user);
        return Meeting.findOne({
          id: meetingId
        }).exec(function(err, meeting) {
          if (err) {
            return res.serverError(err);
          }
          user.attendMeetings.add(meetingId);
          user.save(sails.log);
          return res.json({
            status: 0
          });
        });
      });
    },
    quit: function(req, res) {
      var meetingId, userId;
      userId = req.param('userId');
      meetingId = req.param('meetingId');
      return Meeting.findOne({
        id: meetingId
      }).exec(function(err, meeting) {
        if (err) {
          return res.serverError(err);
        }
        meeting.attendees.remove(userId);
        meeting.save();
        return res.ok();
      });
    },
    subscribeWatch: function(req, res, next) {
      var meetingId;
      meetingId = req.param('meetingId');
      sails.log('subscribeWatch ' + meetingId);
      Meeting.subscribe(req, meetingId, ['message']);
      return next();
    },
    updatePage: function(req, res) {
      var meetingId, pageId;
      meetingId = req.param('meetingId');
      pageId = req.param('pageId');
      sails.log('updatePage ' + meetingId + ' ' + pageId);
      Meeting.message(meetingId, {
        type: 'updatePage',
        pageId: pageId
      });
      return res.ok({
        meetingId: meetingId,
        pageId: pageId
      });
    },
    drawLine: function(req, res) {
      var line, meetingId, pageId;
      meetingId = req.param('meetingId');
      pageId = req.param('pageId');
      line = req.param('line');
      Meeting.message(meetingId, {
        type: 'drawLine',
        pageId: pageId,
        line: line
      });
      return res.ok({
        meetingId: meetingId,
        pageId: pageId,
        line: line
      });
    }
  };

}).call(this);

//# sourceMappingURL=MeetingController.map
