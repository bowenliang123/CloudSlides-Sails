// Generated by CoffeeScript 1.7.1
(function() {
  angular.module('watchCtrl', ['User', 'Meeting']).controller('watchCtrl', function($scope, $rootScope, $stateParams, User, Meeting) {
    var ctx, drawPageImage, init, initSubscribe, pageCanvas;
    pageCanvas = document.getElementById('pageCanvas');
    ctx = pageCanvas.getContext("2d");
    drawPageImage = function(pageId) {
      var canvasWrapperWidth, hgtWidRate, img, scaleRate;
      pageCanvas = document.getElementById('pageCanvas');
      ctx = pageCanvas.getContext("2d");
      canvasWrapperWidth = $('#canvas-wrapper').width();
      img = document.getElementById('page' + pageId);
      hgtWidRate = img.height / img.width;
      if (img.width > canvasWrapperWidth) {
        pageCanvas.width = canvasWrapperWidth;
      } else {
        pageCanvas.width = img.width;
      }
      pageCanvas.height = pageCanvas.width * hgtWidRate;
      scaleRate = pageCanvas.width / img.width;
      ctx.scale(scaleRate, scaleRate);
      ctx.drawImage(img, 0, 0);
      return $scope.isCurrentPageDrawed = true;
    };
    init = function() {
      $scope.meetingId = $stateParams.meetingId;
      $scope.currentPageId = 1;
      $scope.maxPageId = 1;
      $scope.isCurrentPageDrawed = false;
      $scope.refreshMeetingData($scope.meetingId);
      return initSubscribe($scope.meetingId);
    };
    $(window).on('resize', function(e) {
      console.log($scope.currentPageId);
      return drawPageImage($scope.currentPageId);
    });
    $scope.$on('meeting_data_loaded', function() {
      $scope.maxPageId = $scope.meeting.ppt.pageCount;
      $scope.readyPageImagesId = [];
      return $scope.$on('page_image_loaded', function(event, pageId) {
        $scope.readyPageImagesId.push(pageId);
        if (pageId === $scope.currentPageId && !$scope.isCurrentPageDrawed) {
          return drawPageImage(pageId);
        }
      });
    });
    $scope.refreshMeetingData = function(meetingId) {
      console.log('refreshMeetingData');
      $scope.meeting = {};
      return Meeting.get({
        id: $scope.meetingId
      }, function(value, responseHeaders) {
        var _i, _ref, _results;
        $scope.meeting = value;
        $scope.pageRange = (function() {
          _results = [];
          for (var _i = 1, _ref = $scope.meeting.ppt.pageCount; 1 <= _ref ? _i <= _ref : _i >= _ref; 1 <= _ref ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this);
        return $rootScope.$broadcast('meeting_data_loaded');
      }, function(httpResponse) {
        return console.log(httpResponse);
      });
    };
    $scope.$on('updatePageId', function(a, pageId) {
      $scope.currentPageId = pageId;
      drawPageImage(pageId);
      return $scope.$apply();
    });
    initSubscribe = function(meetingId) {
      io.socket.on('meeting', function(obj) {
        var pageId;
        if (obj.verb === 'messaged') {
          console.log(obj);
          pageId = parseInt(obj.data.pageId);
          return $rootScope.$broadcast('updatePageId', pageId);
        }
      });
      io.socket.get('/meeting/subscribeWatch', {
        meetingId: meetingId
      });
      return true;
    };
    return init();
  });

}).call(this);

//# sourceMappingURL=watchCtrl.map
