// Generated by CoffeeScript 1.7.1
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  angular.module('controlCtrl', ['User', 'Meeting']).controller('controlCtrl', function($scope, $stateParams, $timeout, $rootScope, User, Meeting) {
    var ctx, drawPageImage, init;
    ctx = document.getElementById('pageCanvas').getContext("2d");
    drawPageImage = function(pageId) {
      var img;
      img = document.getElementById('page' + pageId);
      ctx.drawImage(img, 0, 0);
      return $scope.isCurrentPageDrawed = true;
    };
    init = function() {
      $scope.meetingId = $stateParams.meetingId;
      $scope.currentPageId = 1;
      $scope.maxPageId = 1;
      $scope.isCurrentPageDrawed = false;
      return $scope.refreshMeetingData($scope.meetingId);
    };
    $scope.$on('meeting_data_loaded', function() {
      $scope.maxPageId = $scope.meeting.ppt.pageCount;
      $scope.readyPageImagesId = [];
      $scope.$on('page_image_loaded', function(event, pageId) {
        $scope.readyPageImagesId.push(pageId);
        if (pageId === $scope.currentPageId && !$scope.isCurrentPageDrawed) {
          return drawPageImage(pageId);
        }
      });
    });
    $scope.refreshMeetingData = function(meetingId) {
      console.log('refreshMeetingData');
      $scope.meeting = {};
      return Meeting.get({
        id: $scope.meetingId
      }, function(value, responseHeaders) {
        var i, _fn, _i, _ref;
        $scope.meeting = value;
        $scope.pageRange = [];
        $scope.pageUrlArr = [];
        _fn = function(i) {
          $scope.pageRange.push(i);
          return $scope.pageUrlArr.push('/ppt/getImage?pptId=' + $scope.meeting.ppt.id + '&pageId=' + i);
        };
        for (i = _i = 1, _ref = $scope.meeting.ppt.pageCount; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          _fn(i);
        }
        return $rootScope.$broadcast('meeting_data_loaded');
      }, function(httpResponse) {
        return console.log(httpResponse);
      });
    };
    $scope.updatePageId = function(pageId) {
      if (pageId < 1 || pageId > $scope.maxPageId) {

      } else {
        $scope.currentPageId = pageId;
        io.socket.post('/meeting/updatePage', {
          meetingId: $scope.meetingId,
          pageId: pageId
        });
        $scope.isCurrentPageDrawed = false;
        if (__indexOf.call($scope.readyPageImagesId, pageId) >= 0) {
          return drawPageImage(pageId);
        }
      }
    };
    init();
    return null;
  });

}).call(this);

//# sourceMappingURL=controlCtrl.map
